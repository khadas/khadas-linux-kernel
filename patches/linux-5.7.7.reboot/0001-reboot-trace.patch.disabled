From 5eca0c576cc83b8772a35fbf1c0e39dd8a250532 Mon Sep 17 00:00:00 2001
From: Artem Lapkin <art@khadas.com>
Date: Sun, 24 Jan 2021 09:57:29 +0800
Subject: [PATCH] reboot trace

---
 arch/arm64/kernel/process.c                   | 21 +++++--
 arch/x86/kernel/reboot.c                      |  3 +-
 drivers/firmware/psci/psci.c                  |  9 +++
 drivers/tty/sysrq.c                           |  1 +
 kernel/reboot.c                               | 23 +++++++-
 kernel/umh.c                                  | 11 +++-
 8 files changed, 116 insertions(+), 9 deletions(-)
 create mode 100644 123

diff --git a/arch/arm64/kernel/process.c b/arch/arm64/kernel/process.c
index 56be4cbf7..04cf967b2 100644
--- a/arch/arm64/kernel/process.c
+++ b/arch/arm64/kernel/process.c
@@ -185,6 +185,10 @@ void machine_power_off(void)
  */
 void machine_restart(char *cmd)
 {
+
+	printk("ARM64 machine_restart\n");
+	mdelay(1000);
+
 	/* Disable interrupts first */
 	local_irq_disable();
 	smp_send_stop();
@@ -193,15 +197,22 @@ void machine_restart(char *cmd)
 	 * UpdateCapsule() depends on the system being reset via
 	 * ResetSystem().
 	 */
-	if (efi_enabled(EFI_RUNTIME_SERVICES))
+	if (efi_enabled(EFI_RUNTIME_SERVICES)) {
+		printk("ARM64 machine_restart EFI restart\n");
 		efi_reboot(reboot_mode, NULL);
-
+	}
 	/* Now call the architecture specific reboot code. */
-	if (arm_pm_restart)
+	if (arm_pm_restart) {
+
+		printk("ARM64 machine_restart arm pm restart mode: %d cmd: %s\n", reboot_mode, cmd );
+
 		arm_pm_restart(reboot_mode, cmd);
-	else
-		do_kernel_restart(cmd);
+	} else {
 
+		printk("ARM64 machine_restart kernel restart\n");
+
+		do_kernel_restart(cmd);
+	}
 	/*
 	 * Whoops - the architecture was unable to reboot.
 	 */
diff --git a/arch/x86/kernel/reboot.c b/arch/x86/kernel/reboot.c
index 8b8cebfd3..a2ba081dd 100644
--- a/arch/x86/kernel/reboot.c
+++ b/arch/x86/kernel/reboot.c
@@ -722,13 +722,14 @@ void native_machine_shutdown(void)
 
 static void __machine_emergency_restart(int emergency)
 {
+	pr_info("machine emery restart\n");
 	reboot_emergency = emergency;
 	machine_ops.emergency_restart();
 }
 
 static void native_machine_restart(char *__unused)
 {
-	pr_notice("machine restart\n");
+	pr_info("native machine restart\n");
 
 	if (!reboot_force)
 		machine_shutdown();
diff --git a/drivers/firmware/psci/psci.c b/drivers/firmware/psci/psci.c
index 2937d44b5..90fb84e8f 100644
--- a/drivers/firmware/psci/psci.c
+++ b/drivers/firmware/psci/psci.c
@@ -7,6 +7,7 @@
 #define pr_fmt(fmt) "psci: " fmt
 
 #include <linux/acpi.h>
+#include <linux/delay.h>
 #include <linux/arm-smccc.h>
 #include <linux/cpuidle.h>
 #include <linux/errno.h>
@@ -269,6 +270,10 @@ static int get_set_conduit_method(struct device_node *np)
 
 static void psci_sys_reset(enum reboot_mode reboot_mode, const char *cmd)
 {
+
+	pr_info("psci_sys_reset\n");
+	mdelay(1000);
+
 	if ((reboot_mode == REBOOT_WARM || reboot_mode == REBOOT_SOFT) &&
 	    psci_system_reset2_supported) {
 		/*
@@ -276,8 +281,12 @@ static void psci_sys_reset(enum reboot_mode reboot_mode, const char *cmd)
 		 * reset_type[30:0] = 0 (SYSTEM_WARM_RESET)
 		 * cookie = 0 (ignored by the implementation)
 		 */
+		pr_info("psci_sys_reset RESET2\n");
+		mdelay(1000);
 		invoke_psci_fn(PSCI_FN_NATIVE(1_1, SYSTEM_RESET2), 0, 0, 0);
 	} else {
+		pr_info("psci_sys_reset SYSTEM RESET\n");
+		mdelay(1000);
 		invoke_psci_fn(PSCI_0_2_FN_SYSTEM_RESET, 0, 0, 0);
 	}
 }
diff --git a/drivers/tty/sysrq.c b/drivers/tty/sysrq.c
index 0dc387879..a7e3280f8 100644
--- a/drivers/tty/sysrq.c
+++ b/drivers/tty/sysrq.c
@@ -161,6 +161,7 @@ static struct sysrq_key_op sysrq_crash_op = {
 
 static void sysrq_handle_reboot(int key)
 {
+	pr_info("sysrq_handle_reboot");
 	lockdep_off();
 	local_irq_enable();
 	emergency_restart();
diff --git a/kernel/reboot.c b/kernel/reboot.c
index c4d472b7f..8ac1bfa1b 100644
--- a/kernel/reboot.c
+++ b/kernel/reboot.c
@@ -8,6 +8,7 @@
 #define pr_fmt(fmt)	"reboot: " fmt
 
 #include <linux/ctype.h>
+#include <linux/delay.h>
 #include <linux/export.h>
 #include <linux/kexec.h>
 #include <linux/kmod.h>
@@ -63,6 +64,7 @@ EXPORT_SYMBOL_GPL(pm_power_off_prepare);
  */
 void emergency_restart(void)
 {
+	pr_info("emergency restart");
 	kmsg_dump(KMSG_DUMP_EMERG);
 	machine_emergency_restart();
 }
@@ -70,9 +72,17 @@ EXPORT_SYMBOL_GPL(emergency_restart);
 
 void kernel_restart_prepare(char *cmd)
 {
+	pr_info("kernel restart prepare cmd: %s", cmd);
+	pr_info("kernel restart prepare IGNORED");
+	return ;
+
 	blocking_notifier_call_chain(&reboot_notifier_list, SYS_RESTART, cmd);
+	pr_info("kernel restart prepare 2");
 	system_state = SYSTEM_RESTART;
+	pr_info("kernel restart prepare - usermodehelper_disable ignored:: last msg before  freez same");
 	usermodehelper_disable();
+	pr_info("kernel restart prepare 4 before device shutdown");
+	mdelay(500);
 	device_shutdown();
 }
 
@@ -243,13 +253,19 @@ void migrate_to_reboot_cpu(void)
  */
 void kernel_restart(char *cmd)
 {
+	pr_info("kernel restart\n");
+	mdelay(500);
 	kernel_restart_prepare(cmd);
+	pr_info("kernel restart migrate to reboot cpu\n");
+	mdelay(500);
 	migrate_to_reboot_cpu();
+	pr_info("kernel restart syscore shutdown\n");
+	mdelay(500);
 	syscore_shutdown();
 	if (!cmd)
-		pr_emerg("Restarting system\n");
+		pr_info("Restarting system!!!\n");
 	else
-		pr_emerg("Restarting system with command '%s'\n", cmd);
+		pr_info("Restarting system with command '%s'\n", cmd);
 	kmsg_dump(KMSG_DUMP_RESTART);
 	machine_restart(cmd);
 }
@@ -261,6 +277,7 @@ static void kernel_shutdown_prepare(enum system_states state)
 		(state == SYSTEM_HALT) ? SYS_HALT : SYS_POWER_OFF, NULL);
 	system_state = state;
 	usermodehelper_disable();
+	pr_info("kernel shutdown prepare - usermode helper disabled - goto device shutdown\n");
 	device_shutdown();
 }
 /**
@@ -530,6 +547,8 @@ static int __init reboot_setup(char *str)
 		 */
 		reboot_default = 0;
 
+		pr_info("reboot setup %s\n", str);
+
 		if (!strncmp(str, "panic_", 6)) {
 			mode = &panic_reboot_mode;
 			str += 6;
diff --git a/kernel/umh.c b/kernel/umh.c
index 3474d6aa5..7feeaaad1 100644
--- a/kernel/umh.c
+++ b/kernel/umh.c
@@ -317,13 +317,17 @@ void __usermodehelper_set_disable_depth(enum umh_disable_depth depth)
 int __usermodehelper_disable(enum umh_disable_depth depth)
 {
 	long retval;
-
+	pr_info("usermodehelper disable depth:%d\n", depth);
 	if (!depth)
 		return -EINVAL;
 
+	pr_info("usermodehelper disable1\n");
 	down_write(&umhelper_sem);
+	pr_info("usermodehelper disable2\n");
 	usermodehelper_disabled = depth;
+	pr_info("usermodehelper disable3\n");
 	up_write(&umhelper_sem);
+	pr_info("usermodehelper disable4\n");
 
 	/*
 	 * From now on call_usermodehelper_exec() won't start any new
@@ -334,10 +338,15 @@ int __usermodehelper_disable(enum umh_disable_depth depth)
 	retval = wait_event_timeout(running_helpers_waitq,
 					atomic_read(&running_helpers) == 0,
 					RUNNING_HELPERS_TIMEOUT);
+
+	pr_info("usermodehelper disable5 %lu :: may be problem place there\n", retval);
+
 	if (retval)
 		return 0;
 
+	pr_info("usermodehelper disable6\n");
 	__usermodehelper_set_disable_depth(UMH_ENABLED);
+	pr_info("usermodehelper disable7\n");
 	return -EAGAIN;
 }
 
-- 
2.25.1

